#lang racket
;; ex 2.85 -- use raise operations for numeric types

;; type heirarchy
(define LEVEL-INTEGER  1)
(define LEVEL-RATIONAL 2)
(define LEVEL-REAL     3)
(define LEVEL-COMPLEX  4)

;; constructors
(define (make-scheme-number n)
  ((get 'make '(scheme-number)) n))
(define (make-rational n d)
  ((get 'make '(rational)) n d))
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag '(complex)) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang '(complex)) r a))

;; generic operations
(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (exp x y) (apply-generic 'exp x y))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (raise n) (apply-generic 'raise n))
(define (project n) (apply-generic 'project n))

(define (equ? a b) (apply-generic 'equ? a b))
(define (=zero? z) (apply-generic '=zero? z))
(define (tower-level x) (apply-generic 'tower-level x))

(define (drop n)
  (let ((project-proc (get 'project (list (type-tag n)))))
    (if project-proc
        (let ((projected-n (project-proc (contents n))))
          (cond ((eq? (tower-level n) LEVEL-INTEGER) projected-n)
                ((equ? (raise projected-n) n) (drop projected-n))
                (else n)))
        n)))
(define DROPPABLE '(add sub mul div))   ; necessary to avoid
                                        ; operations that drop will
                                        ; choke on

(define (apply-generic op . args)
  (define (no-method op type-tags)
    (error "No method for these types"
            (list op type-tags)))
  (define (raise-lowest args)
    (let ((min-type (apply min (map tower-level args))))
      (define (build-list rem-args acc)
        (cond ((null? rem-args) acc)
              ((eq? min-type (tower-level (car rem-args)))
               (build-list (cdr rem-args) (cons (raise (car rem-args)) acc)))
              (else
               (build-list (cdr rem-args) (cons (car rem-args) acc)))))
      (if (eq? min-type LEVEL-COMPLEX)
          args
          (build-list args '()))))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (if (memq op DROPPABLE)
              (drop (apply proc (map contents args)))
              (apply proc (map contents args)))
          (let ((raised-args (raise-lowest args)))
            (if raised-args
                (apply apply-generic (cons op raised-args))
                (no-method op type-tags)))))))

;; return table with key-value pair removed by key
(define (prune-key key table)
  (define (remove-kv key table)
    (cond ((null? table) table)
          ((equal? key (caar table))
           (cdr table))
          (else
           (cons (car table) (remove-kv key (cdr table))))))
  (if (member key (map car table))
      (remove-kv key table)
      table))

(define (make-key op type)
  (list op type))
(define (put-generic op type item table)
  (let ((key (make-key op type)))
    (cons (cons key item) (prune-key key table))))
(define (get-generic op type table)
  (let ((match (assoc (make-key op type) table)))
    (if match
        (cdr match)
        #f)))

(define op-table '())
(define (put op type item)
  (let ((key (make-key op type)))
    (set! op-table (cons (cons key item)
                         (prune-key key op-table)))))
(define (get op type)
  (let ((match (assoc (make-key op type) op-table)))
    (if match
        (cdr match)
        #f)))

(define (attach-tag type-tag datum)
  (cond ((number? datum) datum)
        (else
         (cons type-tag datum))))
(define (type-tag datum)
  (cond ((number? datum) 'scheme-number)
        ((pair? datum) (car datum))
        (else
         (error "Bad tagged datum: TYPE-TAG" datum))))
(define (contents datum)
  (cond ((number? datum) datum)
        ((pair? datum) (cdr datum))
        (else
         (error "Bad tagged datum: CONTENTS" datum))))

(define (square x) (* x x))
(define (exact-if-possible n)
  (if (integer? n)
      (inexact->exact n)
      n))
(define (install-scheme-number-package)
  (define (tag x) x)
  (define (integer->rational n)
    (make-rational n 1))
  (define (real->complex n)
    (make-complex-from-real-imag
     (contents n) 0))
  (define (real->rational n)
    (let ((r (inexact->exact n)))
      (make-rational (numerator r)
                     (denominator r))))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y) (equal? x y)))
  (put 'exp '(scheme-number scheme-number)
       (lambda (x y) (expt x y)))
  (put 'make '(scheme-number) (lambda (x) (tag x)))
  (put '=zero? '(scheme-number) (lambda (x) (equal? x 0)))
  (put 'raise '(scheme-number)
       (lambda (x)
         (if (exact-integer? x)
             (integer->rational x)
             (real->complex x))))
  (put 'project '(scheme-number)
       (lambda (x)
         (if (exact-integer? x)
             x                          ; return integer as itself
             (real->rational x))))
  (put 'tower-level '(scheme-number)
       (lambda (x)
         (if (exact-integer? x)
             LEVEL-INTEGER
             LEVEL-REAL)))
  'done)

(define (install-rational-package)
;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (equ? x y)
    (and (equal? (numer x) (numer y))
         (equal? (denom x) (denom y))))
  (define (=zero? z)
    (equal? (numer z) 0))
  (define (rational->real n)
    (make-scheme-number
     (exact->inexact (/ (numer n) (denom n)))))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
        (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
        (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
        (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
        (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational) equ?)
  (put '=zero? '(rational) =zero?)
  (put 'make '(rational)
        (lambda (n d) (tag (make-rat n d))))
  (put 'raise '(rational) (lambda (x) (rational->real x)))
  (put 'project '(rational) (lambda (x) (make-scheme-number (numer x))))
  (put 'tower-level '(rational) (lambda (x) LEVEL-RATIONAL))
  'done)

(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag '(rectangular)) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang '(polar)) r a))
  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))
  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
        (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
        (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
        (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
        (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag '(complex)
        (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang '(complex)
        (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put '=zero? '(complex) =zero?)
  (put 'equ? '(complex complex) equ?)
  (put 'project '(complex)
       (lambda (x)
         (make-scheme-number (real-part x))))
  (put 'tower-level '(complex) (lambda (x) LEVEL-COMPLEX))

  (define (install-rectangular-package)
    (define (real-part z) (car z))
    (define (imag-part z) (cdr z))
    (define (make-from-real-imag x y) (cons x y))
    (define (magnitude z)
      (sqrt (+ (square (real-part z))
               (square (imag-part z)))))
    (define (angle z)
      (atan (imag-part z) (real-part z)))
    (define (equ? a b)
      (and (equal? (exact-if-possible (real-part a))
                   (exact-if-possible (real-part b)))
           (equal? (exact-if-possible (imag-part a))
                   (exact-if-possible (imag-part b)))))
    (define (=zero? z)
      (and (equal? (real-part z) 0)
           (equal? (imag-part z) 0)))
    (define (make-from-mag-ang r a)
      (cons (* r (cos a)) (* r (sin a))))
    (define (tag x) (attach-tag 'rectangular x))
    (put 'real-part '(rectangular) real-part)
    (put 'imag-part '(rectangular) imag-part)
    (put 'magnitude '(rectangular) magnitude)
    (put 'angle '(rectangular) angle)
    (put 'equ? '(rectangular rectangular) equ?)
    (put '=zero? '(rectangular) =zero?)
    (put 'make-from-real-imag '(rectangular)
         (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang '(rectangular)
         (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)

  (define (install-polar-package)
    (define (magnitude z) (car z))
    (define (angle z) (cdr z))
    (define (make-from-mag-ang r a) (cons r a))
    (define (real-part z)
      (* (magnitude z) (cos (angle z))))
    (define (imag-part z)
      (* (magnitude z) (sin (angle z))))
    (define (equ? a b)
      (and (equal? (exact-if-possible (magnitude a))
                   (exact-if-possible (magnitude b)))
           (equal? (exact-if-possible (angle a))
                   (exact-if-possible (angle b)))))
    (define (=zero? z)
      (and (equal? (magnitude z) 0)
           (equal? (angle z) 0)))
    (define (make-from-real-imag x y)
      (cons (sqrt (+ (square x) (square y)))
            (atan y x)))
    (define (tag x) (attach-tag 'polar x))
    (put 'real-part '(polar) real-part)
    (put 'imag-part '(polar) imag-part)
    (put 'magnitude '(polar) magnitude)
    (put 'angle '(polar) angle)
    (put 'equ? '(polar polar) equ?)
    (put '=zero? '(polar) =zero?)
    (put 'make-from-real-imag '(polar)
         (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang '(polar)
         (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)
  (install-polar-package)
  (install-rectangular-package)
  'done)

(install-scheme-number-package)
(install-rational-package)
(install-complex-package)

(raise (raise (raise 4)))
(equ? (make-complex-from-real-imag 4 0) 4.0)
(equ? (make-complex-from-real-imag 4 0) 4)
(equ? 2 (make-rational 2 1))
(=zero? 4)

(drop 4)
(drop 4.0)
(drop (make-rational 4 1))
(drop (make-rational 4 2))
(drop (make-rational 4 3))
(drop (make-complex-from-real-imag 4 0))
(drop (make-complex-from-real-imag 4.0 0))
(add (make-rational 4 1) (make-rational 4 2))
(add (make-complex-from-real-imag 2.5 0) (make-complex-from-real-imag 2.5 0))
