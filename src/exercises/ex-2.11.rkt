#lang racket

(define (mul-interval-orig x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (mul-interval x y)
  (let ((a (lower-bound x))
        (b (upper-bound x))
        (c (lower-bound y))
        (d (upper-bound y)))
    (cond ((and (< a 0)
                (<= b 0))
           (cond ((and (< c 0)
                       (<= d 0))
                  (make-interval (* b d) (* a c)))
                 ((and (< c 0)
                       (>= d 0))
                  (make-interval (* a d) (* a c)))
                 ((and (>= c 0)
                       (> d 0))
                  (make-interval (* a d) (* b c)))))
          ((and (< a 0)
                (>= b 0))
           (cond ((and (< c 0)
                       (<= d 0))
                  (make-interval (* b c) (* a c)))
                 ((and (< c 0)
                       (>= d 0))
                  (make-interval (min (* a d) (* b c))
                                 (max (* a c) (* b d))))
                 ((and (>= c 0)
                       (> d 0))
                  (make-interval (* a d) (* b d)))))
          ((and (>= a 0)
                (> b 0))
           (cond ((and (< c 0)
                       (<= d 0))
                  (make-interval (* b c) (* a d)))
                 ((and (< c 0)
                       (>= d 0))
                  (make-interval (* b c) (* b d)))
                 ((and (>= c 0)
                       (> d 0))
                  (make-interval (* a c) (* b d)))))))

;; ex 2.07
(define (make-interval a b)
  (if (< a b)
      (cons a b)
      (cons b a)))
(define (lower-bound z)
  (car z))
(define (upper-bound z)
  (cdr z))

(define (display-interval z)
  (newline)
  (display "(")
  (display (lower-bound z))
  (display " . ")
  (display (upper-bound z))
  (display ")"))


(define (test-mul-interval a b)
  (let ((x (mul-interval a b))
        (y (mul-interval-orig a b)))
    (display-interval x)
    (display-interval y)
    (and (= (lower-bound x) (lower-bound y))
         (= (upper-bound x) (upper-bound y)))))

(test-mul-interval (make-interval -2 -1)
                   (make-interval -3 0))
(test-mul-interval (make-interval -2 -1)
                   (make-interval -3 5))
(test-mul-interval (make-interval -2 -1)
                   (make-interval 3 5))
(test-mul-interval (make-interval -2 5)
                   (make-interval -3 0))
(test-mul-interval (make-interval -2 5)
                   (make-interval -3 7))
(test-mul-interval (make-interval -2 5)
                   (make-interval 3 7))
(test-mul-interval (make-interval 1 3)
                   (make-interval -5 -2))
(test-mul-interval (make-interval 1 3)
                   (make-interval -5 2))
(test-mul-interval (make-interval 1 3)
                   (make-interval 2 5))
