#lang racket

;; exercise 3.23 -- implement a deque using pairs

;; implement as a doubly-linked-list using mutable pairs
;;
;; mutable pairs are clearly the wrong structure to use in Racket
(define (make-list-elem)
  (mcons '() '()))
(define (list-next le) (mcar le))
(define (list-prev le) (mcdr le))
(define (set-list-next! le new)
  (set-mcar! le new))
(define (set-list-prev! le new)
  (set-mcdr! le new))

(define (make-node value)
  (mcons value (make-list-elem)))
(define (value node) (mcar node))
(define (list-elem node) (mcdr node))
(define (prev node)  (list-prev (list-elem node)))
(define (next node)  (list-next (list-elem node)))
(define (set-prev! node new)
  (set-list-prev! (list-elem node) new))
(define (set-next! node new)
  (set-list-next! (list-elem node) new))


(define (make-deque)
  (let ((deque (make-node '())))
    (set-next! deque deque)
    (set-prev! deque deque)
    deque))
(define (empty-deque? deque)
  (null? (value (next deque))))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "Deque is empty")
      (value (next deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "Deque is empty")
      (value (prev deque))))

(define (front-insert-deque! deque value)
  (let ((new-node (make-node value)))
    (set-prev! (next deque) new-node)
    (set-next! new-node (next deque))
    (set-prev! new-node deque)
    (set-next! deque new-node)))
(define (rear-insert-deque! deque value)
  (let ((new-node (make-node value)))
    (set-next! (prev deque) new-node)
    (set-prev! new-node (prev deque))
    (set-next! new-node deque)
    (set-prev! deque new-node)))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque) deque)
        (else
         (set-prev! (next (next deque)) deque)
         (set-next! deque (next (next deque))))))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque) deque)
        (else
         (set-next! (prev (prev deque)) deque)
         (set-prev! deque (prev (prev deque))))))
(define (pop-deque! deque)
  (let ((val (front-deque deque)))
    (front-delete-deque! deque)
    val))

(define d1 (make-deque))
(empty-deque? d1)
(front-insert-deque! d1 'a)
(front-insert-deque! d1 'b)
(rear-insert-deque! d1 'x)
(front-insert-deque! d1 'd)
(display d1) (newline)
(rear-delete-deque! d1)
(front-delete-deque! d1)
(display d1) (newline)
