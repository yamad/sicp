#lang racket

(define (install-polynomial-package)
  (define (make-poly variable term-list)
    (define (scrub lot acc)
      (if (null? lot)
          acc
          (scrub (cdr lot)
                 (adjoin-term (car lot) acc))))
    (cons variable (scrub term-list '())))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))

  (define (variable? x) (symbol? x))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))

  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
           (let ((t1 (first-term L1)) (t2 (first-term L2)))
             (cond ((> (order t1) (order t2))
                    (adjoin-term
                     t1 (add-terms (rest-terms L1) L2)))
                   ((< (order t1) (order t2))
                    (adjoin-term
                     t2 (add-terms L1 (rest-terms L2))))
                   (else
                    (adjoin-term
                     (add-term-same-order t1 t2)
                     (add-terms (rest-terms L1)
                                (rest-terms L2)))))))))
  (define (add-term-same-order t1 t2)
    (make-term (order t1)
               (add (coeff t1) (coeff t2))))

  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
        (the-empty-termlist)
        (add-terms (mul-term-by-all-terms (first-term L1) L2)
                   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        (the-empty-termlist)
        (let ((t2 (first-term L)))
          (adjoin-term
           (make-term (+ (order t1) (order t2))
                      (mul (coeff t1) (coeff t2)))
           (mul-term-by-all-terms t1 (rest-terms L))))))

  (define (adjoin-term term term-list)
    (if (null? term-list)
        (list term)
        (let* ((t1 (first-term term-list))
               (rest (rest-terms term-list))
               (o1 (order t1))
               (ot (order term)))
          (cond ((=zero? (coeff term))
                 term-list)
                ((= ot o1)
                 (cons (add-term-same-order term t1)
                       rest))
                ((> ot o1)
                 (cons term term-list))
                (else
                 (cons t1
                       (adjoin-term term rest)))))))

  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))

  (define (zero-order-termlist? term-list)
    (and (= 1 (length term-list))
         (=zero? (order (first-term term-list)))))
  (define (zero-coeff-termlist? term-list)
    (cond ((null? term-list) #t)
          ((=zero? (coeff (first-term term-list)))
           (zero-coeff-termlist? (rest-terms term-list)))
          (else #f)))
  (define (same-termlist? l1 l2)
    (define (same-term? t1 t2)
      (and (equal? (order t1) (order t2))
           (equ? (coeff t1) (coeff t2))))
    (cond ((and (null? l1) (null? l2)) #t)
          ((or (null? l1) (null? l2)) #f)
          ((same-term? (first-term l1) (first-term l2))
           (same-termlist? (rest-terms l1) (rest-terms l2)))
          (else #f)))

  (define (any-variable? p)
    (eq? (variable p) ANY-VARIABLE))
  (define (constant? p)
    (and (any-variable? p) (zero-order-termlist? (term-list p))))

  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))

  (define (add-poly p1 p2)
    (if (or (constant? p1) (constant? p2)
            (same-variable? (variable p1) (variable p2)))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- ADD-POLY"
               (list p1 p2))))

  (define (mul-poly p1 p2)
    (if (or (constant? p1) (constant? p2)
            (same-variable? (variable p1) (variable p2)))
        (make-poly (variable p1)
                   (mul-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- MUL-POLY"
               (list p1 p2))))

  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make '(polynomial)
       (lambda (var terms) (tag (make-poly var terms))))
  (put '=zero? '(polynomial)
       (lambda (x) (zero-coeff-termlist? (term-list x))))
  (put 'project '(polynomial)
       (lambda (x)
         (if (empty-termlist? (term-list x))
             (make-scheme-number 0)
             (coeff (first-term (term-list x))))))
  (put 'raise '(polynomial)
       (lambda (x) (tag x)))
  (put 'equ? '(polynomial polynomial)
       (lambda (p1 p2)
         (and (same-variable? (variable p1) (variable p2))
              (same-termlist? (term-list p1) (term-list p2)))))
  (put 'tower-level '(polynomial) (lambda (x) LEVEL-POLY))

  'done)

;; type heirarchy
(define LEVEL-INTEGER  1)
(define LEVEL-RATIONAL 2)
(define LEVEL-REAL     3)
(define LEVEL-COMPLEX  4)
(define LEVEL-POLY     5)
(define LEVEL-LOWEST   LEVEL-INTEGER)
(define LEVEL-HIGHEST  LEVEL-POLY)
(define ANY-VARIABLE   'ANY-VARIABLE)

;; constructors
(define (make-scheme-number n)
  ((get 'make '(scheme-number)) n))
(define (make-rational n d)
  ((get 'make '(rational)) n d))
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag '(complex)) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang '(complex)) r a))
(define (make-polynomial var terms)
  ((get 'make '(polynomial)) var terms))

;; generic operations
(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (exp x y) (apply-generic 'exp x y))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (raise n) (apply-generic 'raise n))
(define (project n) (apply-generic 'project n))

(define (equ? a b) (apply-generic 'equ? a b))
(define (=zero? z) (apply-generic '=zero? z))
(define (tower-level x) (apply-generic 'tower-level x))

(define (sine n) (apply-generic 'sine n))
(define (cosine n) (apply-generic 'cosine n))
(define (arctan n) (apply-generic 'arctan n))
(define (sqroot n) (apply-generic 'sqroot n))
(define (square n) (apply-generic 'square n))

(define (exact-if-possible n)
  (if (integer? n)
      (inexact->exact n)
      n))
(define (drop n)
  (let ((project-proc (get 'project (list (type-tag n)))))
    (if project-proc
        (let ((projected-n (project-proc (contents n))))
          (cond ((eq? (tower-level n) LEVEL-INTEGER) projected-n)
                ((equ? (raise projected-n) n) (drop projected-n))
                (else n)))
        n)))
(define DROPPABLE '(add sub mul div
                        sine cosine arctan sqroot square))
                                        ; necessary to avoid
                                        ; operations that drop will
                                        ; choke on

(define (apply-generic op . args)
  (define (no-method op type-tags)
    (error "No method for these types"
            (list op type-tags)))
  (define (raise-lowest args)
    (let ((min-type (apply min (map tower-level args))))
      (define (build-list rem-args acc)
        (cond ((null? rem-args) acc)
              ((eq? min-type (tower-level (car rem-args)))
               (build-list (cdr rem-args) (cons (raise (car rem-args)) acc)))
              (else
               (build-list (cdr rem-args) (cons (car rem-args) acc)))))
      (if (equal? min-type LEVEL-HIGHEST)
          args
          (build-list args '()))))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (if (memq op DROPPABLE)
              (drop (apply proc (map contents args)))
              (apply proc (map contents args)))
          (let ((raised-args (raise-lowest args)))
            (if raised-args
                (apply apply-generic (cons op raised-args))
                (no-method op type-tags)))))))

;; return table with key-value pair removed by key
(define (prune-key key table)
  (define (remove-kv key table)
    (cond ((null? table) table)
          ((equal? key (caar table))
           (cdr table))
          (else
           (cons (car table) (remove-kv key (cdr table))))))
  (if (member key (map car table))
      (remove-kv key table)
      table))

(define (make-key op type)
  (list op type))
(define (put-generic op type item table)
  (let ((key (make-key op type)))
    (cons (cons key item) (prune-key key table))))
(define (get-generic op type table)
  (let ((match (assoc (make-key op type) table)))
    (if match
        (cdr match)
        #f)))

(define op-table '())
(define (put op type item)
  (let ((key (make-key op type)))
    (set! op-table (cons (cons key item)
                         (prune-key key op-table)))))
(define (get op type)
  (let ((match (assoc (make-key op type) op-table)))
    (if match
        (cdr match)
        #f)))

(define (attach-tag type-tag datum)
  (cond ((number? datum) datum)
        (else
         (cons type-tag datum))))
(define (type-tag datum)
  (cond ((number? datum) 'scheme-number)
        ((pair? datum) (car datum))
        (else
         (error "Bad tagged datum: TYPE-TAG" datum))))
(define (contents datum)
  (cond ((number? datum) datum)
        ((pair? datum) (cdr datum))
        (else
         (error "Bad tagged datum: CONTENTS" datum))))

(define (install-scheme-number-package)
  (define (tag x) x)
  (define (integer->rational n)
    (make-rational n 1))
  (define (real->complex n)
    (make-complex-from-real-imag
     (contents n) 0))
  (define (real->rational n)
    (let ((r (inexact->exact n)))
      (make-rational (numerator r)
                     (denominator r))))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'sine '(scheme-number)
       (lambda (x) (tag (sin x))))
  (put 'cosine '(scheme-number)
       (lambda (x) (tag (cos x))))
  (put 'arctan '(scheme-number scheme-number)
       (lambda (x y) (tag (atan x y))))
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y) (equal? x y)))
  (put 'exp '(scheme-number scheme-number)
       (lambda (x y) (tag (expt x y))))
  (put 'square '(scheme-number)
       (lambda (x) (tag (* x x))))
  (put 'sqroot '(scheme-number)
       (lambda (x) (tag (sqrt x))))
  (put 'make '(scheme-number) (lambda (x) (tag x)))
  (put '=zero? '(scheme-number) (lambda (x) (equal? x 0)))
  (put 'raise '(scheme-number)
       (lambda (x)
         (if (exact-integer? x)
             (integer->rational x)
             (real->complex x))))
  (put 'project '(scheme-number)
       (lambda (x)
         (if (exact-integer? x)
             x                          ; return integer as itself
             (real->rational x))))
  (put 'tower-level '(scheme-number)
       (lambda (x)
         (if (exact-integer? x)
             LEVEL-INTEGER
             LEVEL-REAL)))
  'done)

(define (install-rational-package)
;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (equ? x y)
    (and (equal? (numer x) (numer y))
         (equal? (denom x) (denom y))))
  (define (=zero? z)
    (equal? (numer z) 0))
  (define (ratio x)
    (/ (numer x) (denom x)))
  (define (rational->real n)
    (make-scheme-number
     (exact->inexact (ratio n))))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
        (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
        (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
        (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
        (lambda (x y) (tag (div-rat x y))))
  (put 'sine '(rational)
       (lambda (x)
         (sine (rational->real x))))
  (put 'cosine '(rational)
       (lambda (x)
         (cosine (rational->real x))))
  (put 'arctan '(rational rational)
       (lambda (x y)
         (arctan (rational->real x) (rational->real y))))
  (put 'equ? '(rational rational) equ?)
  (put 'square '(rational)
       (lambda (x) (tag (mul-rat x))))
  (put 'sqroot '(rational)
       (lambda (x)
         (tag (sqrt (ratio x)))))
  (put '=zero? '(rational) =zero?)
  (put 'make '(rational)
        (lambda (n d) (tag (make-rat n d))))
  (put 'raise '(rational) (lambda (x) (rational->real x)))
  (put 'project '(rational) (lambda (x) (make-scheme-number (numer x))))
  (put 'tower-level '(rational) (lambda (x) LEVEL-RATIONAL))
  'done)

(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag '(rectangular)) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang '(polar)) r a))
  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (sub (angle z1) (angle z2))))
  (define (complex->poly z)
    (make-polynomial ANY-VARIABLE (list (list 0 (tag z)))))

  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
        (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
        (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
        (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
        (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag '(complex)
        (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang '(complex)
        (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put '=zero? '(complex) =zero?)
  (put 'equ? '(complex complex) equ?)
  (put 'project '(complex)
       (lambda (x)
         (make-scheme-number (real-part x))))
  (put 'raise '(complex) (lambda (x) (complex->poly x)))
  (put 'tower-level '(complex) (lambda (x) LEVEL-COMPLEX))

  (define (install-rectangular-package)
    (define (real-part z) (car z))
    (define (imag-part z) (cdr z))
    (define (make-from-real-imag x y) (cons x y))
    (define (magnitude z)
      (sqroot (add (square (real-part z))
                   (square (imag-part z)))))
    (define (angle z)
      (arctan (imag-part z) (real-part z)))
    (define (equ? a b)
      (and (equal? (exact-if-possible (real-part a))
                   (exact-if-possible (real-part b)))
           (equal? (exact-if-possible (imag-part a))
                   (exact-if-possible (imag-part b)))))
    (define (=zero? z)
      (and (equal? (real-part z) 0)
           (equal? (imag-part z) 0)))
    (define (make-from-mag-ang r a)
      (cons (mul r (cosine a)) (mul r (sine a))))
    (define (tag x) (attach-tag 'rectangular x))
    (put 'real-part '(rectangular) real-part)
    (put 'imag-part '(rectangular) imag-part)
    (put 'magnitude '(rectangular) magnitude)
    (put 'angle '(rectangular) angle)
    (put 'equ? '(rectangular rectangular) equ?)
    (put '=zero? '(rectangular) =zero?)
    (put 'make-from-real-imag '(rectangular)
         (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang '(rectangular)
         (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)

  (define (install-polar-package)
    (define (magnitude z) (car z))
    (define (angle z) (cdr z))
    (define (make-from-mag-ang r a) (cons r a))
    (define (real-part z)
      (* (magnitude z) (cosine (angle z))))
    (define (imag-part z)
      (* (magnitude z) (sine (angle z))))
    (define (equ? a b)
      (and (equal? (exact-if-possible (magnitude a))
                   (exact-if-possible (magnitude b)))
           (equal? (exact-if-possible (angle a))
                   (exact-if-possible (angle b)))))
    (define (=zero? z)
      (and (equal? (magnitude z) 0)
           (equal? (angle z) 0)))
    (define (make-from-real-imag x y)
      (cons (sqroot (+ (square x) (square y)))
            (arctan y x)))
    (define (tag x) (attach-tag 'polar x))
    (put 'real-part '(polar) real-part)
    (put 'imag-part '(polar) imag-part)
    (put 'magnitude '(polar) magnitude)
    (put 'angle '(polar) angle)
    (put 'equ? '(polar polar) equ?)
    (put '=zero? '(polar) =zero?)
    (put 'make-from-real-imag '(polar)
         (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang '(polar)
         (lambda (r a) (tag (make-from-mag-ang r a))))
    'done)
  (install-polar-package)
  (install-rectangular-package)
  'done)

(install-scheme-number-package)
(install-rational-package)
(install-complex-package)
(install-polynomial-package)

(raise (raise (raise 4)))
(equ? (make-complex-from-real-imag 4 0) 4.0)
(equ? (make-complex-from-real-imag 4 0) 4)
(equ? 2 (make-rational 2 1))
(=zero? 4)

(drop 4)
(drop 4.0)
(drop (make-rational 4 1))
(drop (make-rational 4 2))
(drop (make-rational 4 3))
(drop (make-complex-from-real-imag 4 0))
(drop (make-complex-from-real-imag 4.0 0))
(drop (make-polynomial 'ANY-VARIABLE '((0 2))))
(add (make-rational 4 1) (make-rational 4 2))
(add (make-complex-from-real-imag 2.5 0) (make-complex-from-real-imag 2.5 0))

(add (make-polynomial 'x '((3 1) (1 3) (0 5)))
     (make-polynomial 'x '((2 1) (1 2) (0 1))))

(define a (make-polynomial 'y '((1 1) (0 1))))
(define b (make-polynomial 'x (list (list 2 1) (list 1 a) (list 0 5))))
(define c (make-polynomial 'x (list (list 2 1) (list 1 2) (list 0 1))))
(add b c)
